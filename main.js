(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"html {\n  height: 100%;\n}\n\nbody {\n  font-family: 'Helvetica';\n  max-width: 1100px;\n  margin: 0;\n  height: 100%;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto 1fr;\n}\n\n#side-bar {\n  grid-column-start: 1;\n  grid-row-start: 2;\n  background: #e9edee;\n  border-radius: 5px;\n  padding: 20px;\n  display: flex;\n  flex-flow: column nowrap;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n}\n\n#side-bar img {\n  filter: invert(80%);\n  align-self: center;\n}\n\n#side-bar img:hover {\n  cursor: pointer;\n}\n\n#side-bar div {\n  padding-bottom: 15px;\n}\n\n#side-bar h2 {\n  font-size: 18px;\n}\n\n#side-bar li {\n  width: max-content;\n  list-style: none;\n  padding: 5px 10px;\n}\n\n#side-bar li:hover {\n  cursor: pointer;\n  transform: scale(1.2);\n  transform-origin: left;\n}\n\n#display-items-container {\n  grid-column-start: 2;\n  grid-row-start: 2;\n  display: flex;\n  flex-flow: column nowrap;\n}\n\n#backdrop {\n  pointer-events: none;\n  position: fixed;\n  inset: 0;\n  background: #000;\n  opacity: 0%;\n}\n\n#backdrop.show {\n  opacity: 60%;\n}\n\nbody > header {\n  grid-column-start: 1;\n  grid-column-end: -1;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  align-content: center;\n  align-items: center;\n  column-gap: 10px;\n  margin: 10px;\n}\n\nbody > header input {\n  margin-left: 20px;\n  max-width: 300px;\n}\n\nbody > header span {\n  width: max-content;\n  height: min-content;\n  background-color: #e9e9ed;\n  padding: 10px;\n  align-self: end;\n}\n\n.date {\n  background: none;\n  font-weight: bold;\n}\n\n.tabs {\n  justify-self: end;\n  display: flex;\n  gap: 10px;\n}\n\n.tabs span {\n  background-color: #e9edee;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n}\n\n.tabs span:hover {\n  cursor: pointer;\n}\n\n.category-tab img {\n  filter: invert(100%);\n  width: min-content;\n  height: min-content;\n  width: 24px;\n  height: auto;\n  margin: -3px 0;\n  vertical-align: middle;\n}\n\n#content > header {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  min-width: 160px;\n  z-index: 1;\n  background-color: #e9e9ed;\n}\n\n.dropdown-content.show {\n  display: block;\n}\n\n.dropdown-item:hover {\n  background-color: #264653;\n  color: white;\n}\n\n.dropdown-item {\n  display: block;\n  padding: 10px;\n}\n\n.in-form-add-category {\n  visibility: hidden;\n}\n\n.in-form-add-category.show {\n  visibility: visible;\n}\n\n.new-category-modal {\n  z-index: 5;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  opacity: 0%;\n  padding: 25px;\n  background: white;\n  border-radius: 5px;\n}\n\n.new-category-modal.show {\n  opacity: 100%;\n  pointer-events: all;\n}\n\n.new-category-modal input {\n  margin: 0 20px 0 10px;\n\n}\n\n.btn-todoItem-form {\n  width: min-content;\n  padding: 5px 15px;\n}\n\n.btn-todoItem-form:hover {\n  cursor: pointer;\n}\n\n.add-item-container {\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-radius: 5px;\n  padding: 10px;\n  z-index: 5;\n  pointer-events: none;\n  opacity: 0%;\n}\n\n.add-item-container.show {\n  opacity: 100%;\n  pointer-events: all;\n}\n\n.add-item-container form {\n  border: none;\n  display: grid;\n  grid-gap: 10px;\n  align-items: center;\n  padding: 10px;\n}\n\n.add-item-container legend {\n  width: max-content;\n  grid-area: 1 / 1 / span 1 / span 2;\n  font-weight: bold;\n  justify-self: center;\n}\n\n.add-item-container img {\n  grid-area: 1 / 3;\n  justify-self: end;\n  align-self: start;\n  filter: invert(80%);\n  float: right;\n  width: 30px;\n  height: 30px;\n}\n\n.add-item-container label {\n  grid-column-start: 1;\n  justify-self: end;\n}\n\n.add-item-container input {\n  grid-column-start: 2;\n  grid-column-end: span 2;\n}\n\nform :nth-child(8) {\n  grid-column-start: 2;\n  grid-column-end: span 1;\n}\n\n.add-item-container textarea {\n  grid-column-start: 2;\n  grid-column-end: span 2;\n}\n\n.add-item-container select {\n  grid-column-start: 2;\n  grid-column-end: span 1;\n  min-width: 120px;\n}\n\n.add-item-container button {\n  grid-column-start: 3;\n  grid-row-start: 7;\n  justify-self: end;\n}\n\n.add-item-container img:hover {\n  cursor: pointer;\n}\n\n.todo-item-container {\n  flex-basis: min-content;\n  padding: 10px;\n  margin: 0 10px 10px 10px;\n  display: grid;\n  grid-template-columns: 24px repeat(3, 1fr) 24px 24px;\n  grid-gap: 10px;\n  align-items: center;\n  border: 2px solid #d2d5d6;\n  border-radius: 5px;\n}\n\n.todo-item-container div {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  align-self: end;\n}\n\n.todo-item-due-days {\n  grid-column-start: 4;\n  justify-self: end;\n}\n\n.todo-item-priority-circle {\n  grid-column-start: 5;\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  display: inline-block;\n\n}\n\n.expand-contract-icon {\n  grid-column-start: 6;\n}\n\n\n.todo-item-due-date {\n  grid-area: 3 / 4;\n  justify-self: end;\n}\n\n.todo-item-priority {\n  grid-area: 3 / 2;\n}\n\n.todo-item-description {\n  grid-area: 2 / 2 / span 1 / span 3;\n  margin: 0;\n}\n\n.todo-item-delete {\n  grid-area: 3 / 6;\n  align-self: end;\n}\n\n.todo-item-container img:hover {\n  cursor: pointer\n}\n\n.todo-item-container img {\n  filter: invert(65%);\n  width: 24px;\n  height: 24px;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["html {\n  height: 100%;\n}\n\nbody {\n  font-family: 'Helvetica';\n  max-width: 1100px;\n  margin: 0;\n  height: 100%;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto 1fr;\n}\n\n#side-bar {\n  grid-column-start: 1;\n  grid-row-start: 2;\n  background: #e9edee;\n  border-radius: 5px;\n  padding: 20px;\n  display: flex;\n  flex-flow: column nowrap;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n}\n\n#side-bar img {\n  filter: invert(80%);\n  align-self: center;\n}\n\n#side-bar img:hover {\n  cursor: pointer;\n}\n\n#side-bar div {\n  padding-bottom: 15px;\n}\n\n#side-bar h2 {\n  font-size: 18px;\n}\n\n#side-bar li {\n  width: max-content;\n  list-style: none;\n  padding: 5px 10px;\n}\n\n#side-bar li:hover {\n  cursor: pointer;\n  transform: scale(1.2);\n  transform-origin: left;\n}\n\n#display-items-container {\n  grid-column-start: 2;\n  grid-row-start: 2;\n  display: flex;\n  flex-flow: column nowrap;\n}\n\n#backdrop {\n  pointer-events: none;\n  position: fixed;\n  inset: 0;\n  background: #000;\n  opacity: 0%;\n}\n\n#backdrop.show {\n  opacity: 60%;\n}\n\nbody > header {\n  grid-column-start: 1;\n  grid-column-end: -1;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  align-content: center;\n  align-items: center;\n  column-gap: 10px;\n  margin: 10px;\n}\n\nbody > header input {\n  margin-left: 20px;\n  max-width: 300px;\n}\n\nbody > header span {\n  width: max-content;\n  height: min-content;\n  background-color: #e9e9ed;\n  padding: 10px;\n  align-self: end;\n}\n\n.date {\n  background: none;\n  font-weight: bold;\n}\n\n.tabs {\n  justify-self: end;\n  display: flex;\n  gap: 10px;\n}\n\n.tabs span {\n  background-color: #e9edee;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n}\n\n.tabs span:hover {\n  cursor: pointer;\n}\n\n.category-tab img {\n  filter: invert(100%);\n  width: min-content;\n  height: min-content;\n  width: 24px;\n  height: auto;\n  margin: -3px 0;\n  vertical-align: middle;\n}\n\n#content > header {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  min-width: 160px;\n  z-index: 1;\n  background-color: #e9e9ed;\n}\n\n.dropdown-content.show {\n  display: block;\n}\n\n.dropdown-item:hover {\n  background-color: #264653;\n  color: white;\n}\n\n.dropdown-item {\n  display: block;\n  padding: 10px;\n}\n\n.in-form-add-category {\n  visibility: hidden;\n}\n\n.in-form-add-category.show {\n  visibility: visible;\n}\n\n.new-category-modal {\n  z-index: 5;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  opacity: 0%;\n  padding: 25px;\n  background: white;\n  border-radius: 5px;\n}\n\n.new-category-modal.show {\n  opacity: 100%;\n  pointer-events: all;\n}\n\n.new-category-modal input {\n  margin: 0 20px 0 10px;\n\n}\n\n.btn-todoItem-form {\n  width: min-content;\n  padding: 5px 15px;\n}\n\n.btn-todoItem-form:hover {\n  cursor: pointer;\n}\n\n.add-item-container {\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-radius: 5px;\n  padding: 10px;\n  z-index: 5;\n  pointer-events: none;\n  opacity: 0%;\n}\n\n.add-item-container.show {\n  opacity: 100%;\n  pointer-events: all;\n}\n\n.add-item-container form {\n  border: none;\n  display: grid;\n  grid-gap: 10px;\n  align-items: center;\n  padding: 10px;\n}\n\n.add-item-container legend {\n  width: max-content;\n  grid-area: 1 / 1 / span 1 / span 2;\n  font-weight: bold;\n  justify-self: center;\n}\n\n.add-item-container img {\n  grid-area: 1 / 3;\n  justify-self: end;\n  align-self: start;\n  filter: invert(80%);\n  float: right;\n  width: 30px;\n  height: 30px;\n}\n\n.add-item-container label {\n  grid-column-start: 1;\n  justify-self: end;\n}\n\n.add-item-container input {\n  grid-column-start: 2;\n  grid-column-end: span 2;\n}\n\nform :nth-child(8) {\n  grid-column-start: 2;\n  grid-column-end: span 1;\n}\n\n.add-item-container textarea {\n  grid-column-start: 2;\n  grid-column-end: span 2;\n}\n\n.add-item-container select {\n  grid-column-start: 2;\n  grid-column-end: span 1;\n  min-width: 120px;\n}\n\n.add-item-container button {\n  grid-column-start: 3;\n  grid-row-start: 7;\n  justify-self: end;\n}\n\n.add-item-container img:hover {\n  cursor: pointer;\n}\n\n.todo-item-container {\n  flex-basis: min-content;\n  padding: 10px;\n  margin: 0 10px 10px 10px;\n  display: grid;\n  grid-template-columns: 24px repeat(3, 1fr) 24px 24px;\n  grid-gap: 10px;\n  align-items: center;\n  border: 2px solid #d2d5d6;\n  border-radius: 5px;\n}\n\n.todo-item-container div {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  align-self: end;\n}\n\n.todo-item-due-days {\n  grid-column-start: 4;\n  justify-self: end;\n}\n\n.todo-item-priority-circle {\n  grid-column-start: 5;\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  display: inline-block;\n\n}\n\n.expand-contract-icon {\n  grid-column-start: 6;\n}\n\n\n.todo-item-due-date {\n  grid-area: 3 / 4;\n  justify-self: end;\n}\n\n.todo-item-priority {\n  grid-area: 3 / 2;\n}\n\n.todo-item-description {\n  grid-area: 2 / 2 / span 1 / span 3;\n  margin: 0;\n}\n\n.todo-item-delete {\n  grid-area: 3 / 6;\n  align-self: end;\n}\n\n.todo-item-container img:hover {\n  cursor: pointer\n}\n\n.todo-item-container img {\n  filter: invert(65%);\n  width: 24px;\n  height: 24px;\n}\n"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],d=0;d<e.length;d++){var c=e[d],l=r.base?c[0]+r.base:c[0],s=a[l]||0,u="".concat(l," ").concat(s);a[l]=s+1;var m=n(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)t[m].references++,t[m].updater(A);else{var p=o(A,r);r.byIndex=d,t.splice(d,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=n(a[i]);t[d].references--}for(var c=r(e,o),l=0;l<a.length;l++){var s=n(a[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{const e=["General"],t=()=>e,r=n=>{e.includes(n)||(e.push(n),(e=>{let n=t().length+1;localStorage.setItem(`category${n}`,e)})(n),Ze(),document.getElementById("category")&&Ve())};function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}let d=[];const c=e=>{for(let t=0;t<d.length;t++)d[t]===e&&d.splice(t,1)},l=e=>{let t=`todoItem${e.id}`;localStorage.removeItem(t)};let s=[];const u=e=>void 0!==e?d.filter((t=>t.category===e)):d,m=e=>{localStorage.setItem(`completedItem${e.id}`,JSON.stringify(e))},A=()=>{let e=["title","description","priorityLevel","dueDate","category"],n={};for(let a=0;a<e.length;a++){let i=document.getElementsByName(e[a])[0].value;if(i.length>0)if("category"===e[a]){let i=document.querySelector(".in-form-add-category > input").value;i&&(o=i,!t().includes(o))?(n[e[a]]=i,r(i)):n[e[a]]="General"}else n[e[a]]=i;else n[e[a]]=null}var o;let a=(e=>({title:e.title,description:e.description,priorityLevel:e.priorityLevel,dueDate:e.dueDate,category:e.category,id:u().length+1,isComplete:!1}))(n);var i;i=a,localStorage.setItem(`todoItem${i.id}`,JSON.stringify(i))};function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function g(e){return o(1,arguments),e instanceof Date||"object"===p(e)&&"[object Date]"===Object.prototype.toString.call(e)}function f(e){if(o(1,arguments),!g(e)&&"number"!=typeof e)return!1;var t=i(e);return!isNaN(Number(t))}function h(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function C(e,t){o(2,arguments);var n=i(e).getTime(),r=h(t);return new Date(n+r)}function E(e,t){o(2,arguments);var n=h(t);return C(e,-n)}var v=864e5;function w(e){o(1,arguments);var t=1,n=i(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function y(e){o(1,arguments);var t=i(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=w(r),d=new Date(0);d.setUTCFullYear(n,0,4),d.setUTCHours(0,0,0,0);var c=w(d);return t.getTime()>=a.getTime()?n+1:t.getTime()>=c.getTime()?n:n-1}function b(e){o(1,arguments);var t=y(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=w(n);return r}var B=6048e5,x={};function k(){return x}function T(e,t){var n,r,a,d,c,l,s,u;o(1,arguments);var m=k(),A=h(null!==(n=null!==(r=null!==(a=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:m.weekStartsOn)&&void 0!==r?r:null===(s=m.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=i(e),g=p.getUTCDay(),f=(g<A?7:0)+g-A;return p.setUTCDate(p.getUTCDate()-f),p.setUTCHours(0,0,0,0),p}function S(e,t){var n,r,a,d,c,l,s,u;o(1,arguments);var m=i(e),A=m.getUTCFullYear(),p=k(),g=h(null!==(n=null!==(r=null!==(a=null!==(d=null==t?void 0:t.firstWeekContainsDate)&&void 0!==d?d:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:p.firstWeekContainsDate)&&void 0!==r?r:null===(s=p.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(A+1,0,g),f.setUTCHours(0,0,0,0);var C=T(f,t),E=new Date(0);E.setUTCFullYear(A,0,g),E.setUTCHours(0,0,0,0);var v=T(E,t);return m.getTime()>=C.getTime()?A+1:m.getTime()>=v.getTime()?A:A-1}function L(e,t){var n,r,a,i,d,c,l,s;o(1,arguments);var u=k(),m=h(null!==(n=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(d=t.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==r?r:null===(l=u.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1),A=S(e,t),p=new Date(0);p.setUTCFullYear(A,0,m),p.setUTCHours(0,0,0,0);var g=T(p,t);return g}var D=6048e5;function M(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const j=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return M("yy"===t?r%100:r,t.length)},P=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):M(n+1,2)},U=function(e,t){return M(e.getUTCDate(),t.length)},Y=function(e,t){return M(e.getUTCHours()%12||12,t.length)},W=function(e,t){return M(e.getUTCHours(),t.length)},q=function(e,t){return M(e.getUTCMinutes(),t.length)},N=function(e,t){return M(e.getUTCSeconds(),t.length)},O=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return M(Math.floor(r*Math.pow(10,n-3)),t.length)};var I={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return j(e,t)},Y:function(e,t,n,r){var o=S(e,r),a=o>0?o:1-o;return"YY"===t?M(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):M(a,t.length)},R:function(e,t){return M(y(e),t.length)},u:function(e,t){return M(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return M(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return M(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return P(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return M(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){o(1,arguments);var n=i(e),r=T(n,t).getTime()-L(n,t).getTime();return Math.round(r/D)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):M(a,t.length)},I:function(e,t,n){var r=function(e){o(1,arguments);var t=i(e),n=w(t).getTime()-b(t).getTime();return Math.round(n/B)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):M(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):U(e,t)},D:function(e,t,n){var r=function(e){o(1,arguments);var t=i(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/v)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):M(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return M(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return M(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return M(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Y(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):W(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):M(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):M(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):q(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):N(e,t)},S:function(e,t){return O(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return H(o);case"XXXX":case"XX":return F(o);default:return F(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return H(o);case"xxxx":case"xx":return F(o);default:return F(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+z(o,":");default:return"GMT"+F(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+z(o,":");default:return"GMT"+F(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return M(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return M((r._originalDate||e).getTime(),t.length)}};function z(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+M(a,2)}function H(e,t){return e%60==0?(e>0?"-":"+")+M(Math.abs(e)/60,2):F(e,t)}function F(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+M(Math.floor(o/60),2)+n+M(o%60,2)}const Q=I;var R=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},X=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const G={p:X,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return R(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",R(o,t)).replace("{{time}}",X(a,t))}};function J(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var $=["D","DD"],Z=["YY","YYYY"];function V(e){return-1!==$.indexOf(e)}function _(e){return-1!==Z.indexOf(e)}function K(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ee={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function te(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const ne={date:te({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:te({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:te({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var re={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function oe(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[d]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const ae={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:oe({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:oe({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:oe({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:oe({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:oe({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ie(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,d=a[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(c)?ce(c,(function(e){return e.test(d)})):de(c,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(l):l,i=n.valueCallback?n.valueCallback(i):i;var s=t.slice(d.length);return{value:i,rest:s}}}function de(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function ce(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var le,se={ordinalNumber:(le={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(le.matchPattern);if(!n)return null;var r=n[0],o=e.match(le.parsePattern);if(!o)return null;var a=le.valueCallback?le.valueCallback(o[0]):o[0];a=t.valueCallback?t.valueCallback(a):a;var i=e.slice(r.length);return{value:a,rest:i}}),era:ie({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ie({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ie({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ie({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ie({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ue={code:"en-US",formatDistance:function(e,t,n){var r,o=ee[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ne,formatRelative:function(e,t,n,r){return re[e]},localize:ae,match:se,options:{weekStartsOn:0,firstWeekContainsDate:1}};var me=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ae=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,pe=/^'([^]*?)'?$/,ge=/''/g,fe=/[a-zA-Z]/;function he(e,t,n){var r,a,d,c,l,s,u,m,A,p,g,C,v,w,y,b,B,x;o(2,arguments);var T=String(t),S=k(),L=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:S.locale)&&void 0!==r?r:ue,D=h(null!==(d=null!==(c=null!==(l=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(u=n.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==l?l:S.firstWeekContainsDate)&&void 0!==c?c:null===(A=S.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==d?d:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=h(null!==(g=null!==(C=null!==(v=null!==(w=null==n?void 0:n.weekStartsOn)&&void 0!==w?w:null==n||null===(y=n.locale)||void 0===y||null===(b=y.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==v?v:S.weekStartsOn)&&void 0!==C?C:null===(B=S.locale)||void 0===B||null===(x=B.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==g?g:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!L.localize)throw new RangeError("locale must contain localize property");if(!L.formatLong)throw new RangeError("locale must contain formatLong property");var j=i(e);if(!f(j))throw new RangeError("Invalid time value");var P=J(j),U=E(j,P),Y={firstWeekContainsDate:D,weekStartsOn:M,locale:L,_originalDate:j},W=T.match(Ae).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,G[t])(e,L.formatLong):e})).join("").match(me).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Ce(r);var a=Q[o];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!_(r)||K(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!V(r)||K(r,t,String(e)),a(U,r,L.localize,Y);if(o.match(fe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return W}function Ce(e){var t=e.match(pe);return t?t[1].replace(ge,"'"):e}function Ee(e){o(1,arguments);var t=i(e);return t.setHours(0,0,0,0),t}var ve=864e5;function we(e,t){o(2,arguments);var n=Ee(e),r=Ee(t),a=n.getTime()-J(n),i=r.getTime()-J(r);return Math.round((a-i)/ve)}function ye(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}const be=n.p+"29e7af1f455e5a0c9034.png",Be=n.p+"106d68c85e41ecdd19e0.png",xe=n.p+"446e4be56917a327f4cc.png",ke=n.p+"29909664a15cfc64bc04.png",Te=n.p+"f7f8c5c57bff3cf3e16b.png";let Se=[];const Le=document.getElementById("content"),De=document.createElement("div");De.id="display-items-container",Le?.appendChild(De);const Me=(e,t)=>{let n=document.createElement("p");n.textContent=t.description,n.classList.add("todo-item-description"),e.appendChild(n);let r=document.createElement("div");var o;if(r.textContent="Priority: "+("green"===(o=t.priorityLevel)?"Low":"yellow"===o?"Normal":"orange"===o?"Moderate":"High"),r.classList.add("todo-item-priority"),e.appendChild(r),!1===t.isComplete&&null!==t.dueDate){let n=document.createElement("div");n.textContent=`Due: ${he(new Date(t.dueDate),"EEE L/dd")} `,n.classList.add("todo-item-due-date"),e.appendChild(n)}let a=document.createElement("img");a.src=xe,a.title="Delete Item",a.classList.add("todo-item-delete"),e.appendChild(a),a.addEventListener("click",(()=>{(e=>{!0===e.isComplete?((e=>{for(let t=0;t<s.length;t++)s[t]===e&&s.splice(t,1)})(e),(e=>{let t=`completedItem${e.id}`;localStorage.removeItem(t)})(e)):(c(e),l(e))})(t),e.remove()}))},je=(e,t)=>{if(!1===t.isComplete){let n=document.createElement("img");n.src=ke,n.classList.add("todo-item-complete-btn"),n.title="Mark Complete",e.appendChild(n),n.addEventListener("click",(()=>{(e=>{e.isComplete=!0,c(e),(e=>{s.push(e)})(e),m(e),l(e)})(t),e.remove()}))}else{let t=document.createElement("img");t.src=Te,t.classList.add("todo-item-complete-btn"),e.appendChild(t)}let n=document.createElement("div");n.textContent=t.title,e.appendChild(n);let r=document.createElement("div");r.classList.add("todo-item-category"),r.textContent=t.category,e.appendChild(r);if(!1===t.isComplete&&null!==t.dueDate){let n=document.createElement("div");n.classList.add("todo-item-due-days"),n.textContent=(e=>{let t=function(e,t){o(2,arguments);var n=i(e),r=i(t),a=ye(n,r),d=Math.abs(we(n,r));n.setDate(n.getDate()-a*d);var c=a*(d-Number(ye(n,r)===-a));return 0===c?0:c}(new Date(e),new Date);return 0===t?"Due today":t<0?`${Math.abs(t)} days past due`:`Due in ${t} days`})(t.dueDate),e.appendChild(n)}let a=document.createElement("span");a.classList.add("todo-item-priority-circle"),e.appendChild(a),((e,t)=>{let n;n="green"===t?"#668d3c":"orange"===t?"#d57500":"red"===t?"#8f3b1b":"#dbca69",e.style.backgroundColor=n})(a,t.priorityLevel),((e,t)=>{let n=document.createElement("img");n.classList.add("expand-contract-icon"),e.classList.contains("contracted")?(n.src=be,n.title="Expand View"):(n.src=Be,n.title="Contract View"),n.addEventListener("click",(()=>{Pe(e,t)})),e.appendChild(n)})(e,t)},Pe=(e,t)=>{e.textContent="",e.classList.contains("contracted")?(e.classList.toggle("contracted"),je(e,t),Me(e,t)):(e.classList.toggle("contracted"),je(e,t))},Ue=e=>{e.forEach((e=>{let t=document.createElement("div");t.classList.add("todo-item-container"),Pe(t,e),De.appendChild(t)})),Se=e},Ye=()=>{const e=document.querySelector("#content > header");e&&e.remove(),De.textContent="";let t=u();Ue(t)},We=e=>{const t=document.querySelector("#content > header > h2");t?t.textContent=e:((e,t)=>{const n=document.createElement("header"),r=document.createElement("h2");r.textContent=t,n.appendChild(r),e.prepend(n)})(Le,e),De.textContent="";let n=u(e);Ue(n)},qe=()=>{De.textContent="";let e=(e=>{let t=e.filter((e=>null===e.dueDate));for(let n=0;n<t.length;n++){let r=e.indexOf(t[n]);e.splice(r,1)}return e.sort(((e,t)=>function(e,t){o(2,arguments);var n=i(e),r=i(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}(new Date(e.dueDate),new Date(t.dueDate)))).concat(t)})(Se);Ue(e)},Ne=n.p+"cfdcf7823b81680c3c3d.png",Oe=(e,t)=>{let n=document.createElement("label");n.textContent=t.textContent,n.setAttribute("for",t.for),e?.appendChild(n)},Ie=(e,t,n)=>{let r=document.querySelector("form");Oe(r,t);let o=document.createElement("input");if(o.type=e,o.name=t.for,n)for(const[e,t]of Object.entries(n))o.setAttribute(e,t);r?.appendChild(o)},ze=e=>{let n=t().sort(),r={"Create New":["Create New ..."]};for(let e=0;e<n.length;e++)r[n[e]]=n[e];return r},He=(e,t,n)=>{for(const[r,o]of Object.entries(t)){let t=document.createElement("option");t.value=r,t.textContent=o,n&&t.value===n&&(t.selected=!0),e.appendChild(t)}},Fe=(e,t,n)=>{let r=document.querySelector("form");Oe(r,e);let o=document.createElement("select");o.name=e.for,o.id=o.name,r?.appendChild(o),He(o,t,n)},Qe=()=>{let e=document.querySelector("form"),t=document.createElement("div");t.classList.add("in-form-add-category");let n=document.createElement("input");n.placeholder="New Category Name",n.name="category",t.appendChild(n),e?.appendChild(t),document.getElementById("category")?.addEventListener("change",(function(){"Create New"===this.value?t.classList.toggle("show"):t.classList.contains("show")&&t.classList.remove("show")}))},Re=()=>{const e=document.querySelector(".add-item-container"),t=document.getElementById("backdrop");e.classList.add("show"),t.classList.add("show")},Xe=n.p+"ff49f88039eeb3e2f21e.png",Ge=()=>{null===document.querySelector(".new-category-modal")&&(()=>{const e=document.getElementById("content");let t=document.createElement("div");t.classList.add("new-category-modal"),e.appendChild(t);let n=document.createElement("label");n.textContent="New Category",n.setAttribute("for","new-category"),t.appendChild(n);let o=document.createElement("input");o.setAttribute("name","new-category"),t.appendChild(o);let a=document.createElement("button");a.textContent="create",t.appendChild(a),a.addEventListener("click",(()=>{r(o.value),document.querySelector(".new-category-modal").classList.remove("show"),document.querySelector("#backdrop").classList.remove("show")}))})();const e=document.querySelector(".new-category-modal"),t=document.getElementById("backdrop");e.classList.add("show"),t.classList.add("show"),document.querySelector(".new-category-modal input").focus(),document.addEventListener("click",(n=>{const r=document.getElementsByClassName("dropdown-item");for(let e=0;e<r.length;e++)if(r[e]===n.target)return;e.classList.contains("show")&&(e.contains(n.target)||e==n.target||(e.classList.remove("show"),t.classList.remove("show")))}))},Je=e=>{const t=document.createElement("div");t.classList.add("dropdown-item"),t.textContent="Create New",e.appendChild(t),t.addEventListener("click",Ge)},$e=e=>{const n=t().sort();for(const t of n){const n=document.createElement("div");n.classList.add("dropdown-item"),n.textContent=t,e.appendChild(n),n.addEventListener("click",(()=>{We(t)}))}},Ze=()=>{let e=document.querySelector(".dropdown-content");e.textContent="",Je(e),$e(e)},Ve=()=>{let e=document.getElementById("category");e.textContent="",He(e,ze(),"General")},_e=n.p+"55912835de15783c7a93.png",Ke=document.getElementById("side-bar");var et=n(379),tt=n.n(et),nt=n(795),rt=n.n(nt),ot=n(569),at=n.n(ot),it=n(565),dt=n.n(it),ct=n(216),lt=n.n(ct),st=n(589),ut=n.n(st),mt=n(426),At={};At.styleTagTransform=ut(),At.setAttributes=dt(),At.insert=at().bind(null,"head"),At.domAPI=rt(),At.insertStyleElement=lt(),tt()(mt.Z,At),mt.Z&&mt.Z.locals&&mt.Z.locals,(()=>{const e=Object.entries(localStorage).filter((e=>e[0].includes("todoItem")));for(let t=0;t<e.length;t++){let n=JSON.parse(e[t][1]);d.push(n)}})(),(()=>{let e=Object.entries(localStorage).filter((e=>e[0].includes("completedItem")));for(let t=0;t<e.length;t++){let n=JSON.parse(e[t][1]);s.push(n)}})(),(()=>{let t=Object.entries(localStorage).filter((e=>e[0].includes("category")));for(let n=0;n<t.length;n++)e.push(t[n][1])})(),(()=>{const e=document.createElement("img");e.src=_e,e.addEventListener("click",Re),e.title="Create Task",Ke?.appendChild(e)})(),(()=>{const e=document.createElement("div");Ke?.appendChild(e);const t=document.createElement("h2");t.textContent="View",e.appendChild(t);const n=document.createElement("li");n.textContent="Expand All",e.appendChild(n),n.addEventListener("click",(()=>{(()=>{const e=document.getElementsByClassName("todo-item-container"),t=Se;for(let n=0;n<t.length;n++)e[n].classList.contains("contracted")&&(e[n].classList.remove("contracted"),e[n].textContent="",je(e[n],t[n]),Me(e[n],t[n]))})()}));const r=document.createElement("li");r.textContent="Contract All",e.appendChild(r),r.addEventListener("click",(()=>{(()=>{const e=document.getElementsByClassName("todo-item-container"),t=Se;for(let n=0;n<t.length;n++)e[n].classList.contains("contracted")||(e[n].classList.add("contracted"),e[n].textContent="",je(e[n],t[n]))})()}))})(),(()=>{const e=document.createElement("div");Ke?.appendChild(e),e.classList.add("sort-container");const t=document.createElement("h2");t.textContent="Sort By",e.appendChild(t);const n=document.createElement("li");n.textContent="Due Date",e.appendChild(n),n.addEventListener("click",(()=>{qe()}));const r=document.createElement("li");r.textContent="Priority Level",e.appendChild(r),r.addEventListener("click",(()=>{(()=>{De.textContent="";let e=(e=>e.sort(((e,t)=>((e,t)=>{let n=["green","yellow","orange","red"];return n.indexOf(e)>n.indexOf(t)?-1:n.indexOf(e)<n.indexOf(t)?1:0})(e.priorityLevel,t.priorityLevel))))(Se);Ue(e)})()}))})(),(()=>{const e=document.createElement("div");Ke?.appendChild(e);const t=document.createElement("h2");t.textContent="Completed",e.appendChild(t);const n=document.createElement("li");n.textContent="View All",e.appendChild(n),n.addEventListener("click",(()=>{De.textContent="",Ue(s)}))})(),(()=>{(()=>{const e=document.querySelector(".category-tab"),t=document.createElement("img");t.src=Xe,e.appendChild(t)})();const e=document.querySelector(".category-tab"),t=document.createElement("div");t.classList.add("dropdown-content"),e?.appendChild(t),Je(t),$e(t),document.addEventListener("click",(n=>{const r=document.getElementsByClassName("dropdown-item");if(!e?.contains(n.target))for(let e=0;e<r.length;e++)r[e]!==n.target&&t.classList.remove("show")}))})(),document.querySelector(".category-tab")?.addEventListener("click",(()=>{document.querySelector(".dropdown-content").classList.toggle("show")})),document.querySelector(".overview-tab")?.addEventListener("click",Ye),Ye(),(()=>{const e=document.querySelector(".date");e&&(e.textContent=`Today is ${he(new Date,"EEEE, LLLL do")}`)})(),(()=>{let e=document.querySelector("#content"),t=document.createElement("div");t.classList.add("add-item-container"),e?.appendChild(t),document.addEventListener("click",(e=>{t.classList.contains("show")&&(e=>{const n=document.getElementById("backdrop"),r=document.querySelector("#side-bar > img");e.target===r||t.contains(e.target)||t==e.target||(t.classList.remove("show"),n.classList.remove("show"))})(e)}));let n=document.createElement("form");t.appendChild(n);let r=document.createElement("legend");r.textContent="Create New Task",n.appendChild(r),(e=>{let t=document.createElement("img");t.src=Ne,t.title="Close Form",e.appendChild(t),t.addEventListener("click",(()=>{document.querySelector(".add-item-container").classList.remove("show"),document.getElementById("backdrop").classList.remove("show")}))})(n),Ie("text",{textContent:"Title",for:"title"}),((e,t)=>{let n=document.querySelector("form");Oe(n,e);let r=document.createElement("textarea");if(r.name=e.for,t)for(const[e,n]of Object.entries(t))r.setAttribute(e,n);n?.appendChild(r)})({textContent:"Description",for:"description"},{cols:"20",rows:"8"}),Ie("date",{textContent:"Due Date",for:"dueDate"}),Fe({textContent:"Priority",for:"priorityLevel"},{green:"Low Priority",yellow:"Normal Priority",orange:"Somewhat Priority",red:"High Priority"},"yellow"),Fe({textContent:"Category",for:"category"},ze(),"General"),Qe();const o=document.createElement("button");o.textContent="Create",o.classList.add("btn-add-item"),n.appendChild(o),o.addEventListener("click",A)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,